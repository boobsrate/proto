// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package titsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TitsServiceClient is the client API for TitsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TitsServiceClient interface {
	// Returns specified count of tits with ordering.
	GetTits(ctx context.Context, in *GetTitsRequest, opts ...grpc.CallOption) (*GetTitsResponse, error)
	// Rate or report tits.
	RateTits(ctx context.Context, in *RateTitsRequest, opts ...grpc.CallOption) (*RateTitsResponse, error)
}

type titsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTitsServiceClient(cc grpc.ClientConnInterface) TitsServiceClient {
	return &titsServiceClient{cc}
}

func (c *titsServiceClient) GetTits(ctx context.Context, in *GetTitsRequest, opts ...grpc.CallOption) (*GetTitsResponse, error) {
	out := new(GetTitsResponse)
	err := c.cc.Invoke(ctx, "/tits.v1.TitsService/GetTits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *titsServiceClient) RateTits(ctx context.Context, in *RateTitsRequest, opts ...grpc.CallOption) (*RateTitsResponse, error) {
	out := new(RateTitsResponse)
	err := c.cc.Invoke(ctx, "/tits.v1.TitsService/RateTits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TitsServiceServer is the server API for TitsService service.
// All implementations should embed UnimplementedTitsServiceServer
// for forward compatibility
type TitsServiceServer interface {
	// Returns specified count of tits with ordering.
	GetTits(context.Context, *GetTitsRequest) (*GetTitsResponse, error)
	// Rate or report tits.
	RateTits(context.Context, *RateTitsRequest) (*RateTitsResponse, error)
}

// UnimplementedTitsServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTitsServiceServer struct {
}

func (UnimplementedTitsServiceServer) GetTits(context.Context, *GetTitsRequest) (*GetTitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTits not implemented")
}
func (UnimplementedTitsServiceServer) RateTits(context.Context, *RateTitsRequest) (*RateTitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateTits not implemented")
}

// UnsafeTitsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TitsServiceServer will
// result in compilation errors.
type UnsafeTitsServiceServer interface {
	mustEmbedUnimplementedTitsServiceServer()
}

func RegisterTitsServiceServer(s grpc.ServiceRegistrar, srv TitsServiceServer) {
	s.RegisterService(&TitsService_ServiceDesc, srv)
}

func _TitsService_GetTits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitsServiceServer).GetTits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tits.v1.TitsService/GetTits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitsServiceServer).GetTits(ctx, req.(*GetTitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TitsService_RateTits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateTitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TitsServiceServer).RateTits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tits.v1.TitsService/RateTits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TitsServiceServer).RateTits(ctx, req.(*RateTitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TitsService_ServiceDesc is the grpc.ServiceDesc for TitsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TitsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tits.v1.TitsService",
	HandlerType: (*TitsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTits",
			Handler:    _TitsService_GetTits_Handler,
		},
		{
			MethodName: "RateTits",
			Handler:    _TitsService_RateTits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tits/v1/tits_service.proto",
}
